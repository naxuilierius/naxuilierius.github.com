{"version":3,"sources":["mp4.mp4","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","App","state","videoBlob","isLoading","isPauseDisabled","isPlaying","this","prefetch_file","videoUrl","onSuccess","onProgress","onError","_this2","video","document","getElementById","play","then","_","console","log","setState","url","that","createElement","src","setTimeout","refs","player","fetched_callback","progress_callback","error_callback","xhr","XMLHttpRequest","open","responseType","addEventListener","status","blob_url","window","URL","webkitURL","createObjectURL","response","prev_pc","event","lengthComputable","pc","Math","round","loaded","total","send","_this3","_this$state","react_default","a","className","concat","onClick","lib","playsInline","ref","poster","Component","Boolean","location","hostname","match","ReactDOM","render","src_App","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,+OC2GzBC,6MArGbC,MAAQ,CACNC,UAAW,GACXC,WAAW,EACXC,iBAAiB,EACjBC,WAAW,sFAIXC,KAAKC,cAAcC,IAAUF,KAAKG,UAAWH,KAAKI,WAAYJ,KAAKK,QADtDL,0CAGH,IAAAM,EAAAN,KACJO,EAAQC,SAASC,eAAe,SAEhCF,GACAA,EAAMG,OAAOC,KAAK,SAAAC,GACdC,QAAQC,IAAI,WACZR,EAAKS,SAAS,CAACjB,iBAAiB,wCAKlCkB,EAAKC,GACCT,SAASU,cAAc,SACxBC,MACTN,QAAQC,IAAI,UAAUE,GACtBC,EAAKF,SAAS,CAACnB,UAAWoB,IAE1BI,WAAW,WACTH,EAAKF,SAAS,CAAClB,WAAW,KACzB,+GAgBPG,KAAKe,SAAS,CAAChB,WAAW,IAC1BC,KAAKqB,KAAKC,OAAOZ,6CAGLM,EACQO,EACAC,EACAC,EAAgBR,GAClC,IAAIS,EAAM,IAAIC,eACdD,EAAIE,KAAK,MAAOZ,GAAK,GACrBU,EAAIG,aAAe,OAEnBH,EAAII,iBAAiB,OAAQ,WACzB,GAAmB,MAAfJ,EAAIK,OAAgB,CACpB,IACIC,GADMC,OAAOC,KAAOD,OAAOE,WACZC,gBAAgBV,EAAIW,UACvCd,EAAiBS,EAAUf,QAE3BQ,MAEL,GAEH,IAAIa,EAAU,EACdZ,EAAII,iBAAiB,WAAY,SAAUS,GACvC,GAAIA,EAAMC,iBAAkB,CACxB,IAAIC,EAAKC,KAAKC,MAAOJ,EAAMK,OAASL,EAAMM,MAAS,KAC/CJ,GAAMH,IACNA,EAAUG,EACVjB,EAAkBiB,OAI9Bf,EAAIoB,wCAEC,IAAAC,EAAA/C,KAAAgD,EACsDhD,KAAKL,MAA1DC,EADDoD,EACCpD,UAAWC,EADZmD,EACYnD,UAAWC,EADvBkD,EACuBlD,gBAAiBC,EADxCiD,EACwCjD,UAE/C,OACEkD,EAAAC,EAAAhC,cAAA,OAAKiC,UAAU,QACbF,EAAAC,EAAAhC,cAAA,OAAKiC,UAAS,kBAAAC,OAAqBvD,EAAsB,GAAV,UAC7CoD,EAAAC,EAAAhC,cAAA,OAAKiC,UAAU,cACfF,EAAAC,EAAAhC,cAAA,OAAKiC,UAAU,mBAAf,sCAEFF,EAAAC,EAAAhC,cAAA,OAAKiC,UAAS,WAAAC,OAAarD,EAAY,QAAU,GAAnC,KAAAqD,OAA0CvD,EAAsB,GAAV,SAAgBwD,QAAS,kBAAMN,EAAKrC,SAAxG,mBACCd,GACCqD,EAAAC,EAAAhC,cAAA,OAAKiC,UAAS,aAAAC,OAAgBvD,EAAsB,GAAV,QAA5B,KAAAuD,OAA4CtD,EAAkB,iBAAmB,GAAjF,KAAAsD,OAAuFrD,EAAY,WAAa,KAC5HkD,EAAAC,EAAAhC,cAACoC,EAAA,OAAD,CAAQC,aAAa,EAAMC,IAAI,SAASC,QAAQ,GAC9CR,EAAAC,EAAAhC,cAAA,UAAQC,IAAKvB,cA7FT8D,aCOEC,QACW,cAA7B1B,OAAO2B,SAASC,UAEe,UAA7B5B,OAAO2B,SAASC,UAEhB5B,OAAO2B,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOf,EAAAC,EAAAhC,cAAC+C,EAAD,MAASzD,SAASC,eAAe,SD2H3C,kBAAmByD,WACrBA,UAAUC,cAAcC,MAAMzD,KAAK,SAAA0D,GACjCA,EAAaC","file":"static/js/main.339aeffd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/mp4.151c97b2.mp4\";","import React, { Component } from 'react';\nimport { Player } from 'video-react';\nimport videoUrl from './mp4.mp4';\n\n\nclass App extends Component {\n  state = {\n    videoBlob: '',\n    isLoading: true,\n    isPauseDisabled: false,\n    isPlaying: false\n  }\n  componentDidMount() {\n    const that = this;\n    this.prefetch_file(videoUrl, this.onSuccess, this.onProgress, this.onError, that);\n  }\n  playVideo() {\n      var video = document.getElementById('video')\n\n      if (video) {\n          video.play().then(_ => {\n              console.log('played!')\n              this.setState({isPauseDisabled: true})\n          });\n      }\n  }\n\n  onSuccess(url, that) {\n      var video = document.createElement('VIDEO')\n      if (!video.src) {\n        console.log('success',url)\n        that.setState({videoBlob: url})\n\n        setTimeout(() => {\n          that.setState({isLoading: false})\n        }, 1500);\n          // video.id = 'video';\n          // document.body.appendChild(video);\n          // video.src = url\n      }\n  }\n\n  onProgress() {\n\n  }\n\n  onError() {\n\n  }\n\n  play() {\n    this.setState({isPlaying: true})\n    this.refs.player.play();\n  }\n\n  prefetch_file(url,\n                        fetched_callback,\n                        progress_callback,\n                        error_callback, that) {      \n      var xhr = new XMLHttpRequest();\n      xhr.open(\"GET\", url, true);\n      xhr.responseType = \"blob\";\n\n      xhr.addEventListener(\"load\", function () {\n          if (xhr.status === 200) {\n              var URL = window.URL || window.webkitURL;\n              var blob_url = URL.createObjectURL(xhr.response);\n              fetched_callback(blob_url, that);\n          } else {\n              error_callback();\n          }\n      }, false);\n\n      var prev_pc = 0;\n      xhr.addEventListener(\"progress\", function (event) {\n          if (event.lengthComputable) {\n              var pc = Math.round((event.loaded / event.total) * 100);\n              if (pc != prev_pc) {\n                  prev_pc = pc;\n                  progress_callback(pc);\n              }\n          }\n      });\n      xhr.send();\n  }\n  render() {\n    const { videoBlob, isLoading, isPauseDisabled, isPlaying } = this.state;\n\n    return (\n      <div className=\"nxlr\">\n        <div className={`preloader__wrap${!isLoading ? ' hide' : ''}`}>\n          <div className='preloader'/>\n          <div className='preloader__text'>KRAUNASI NAXUJ, PALAUKIT SKATINOS</div>\n        </div>\n        <div className={`play-btn${isPlaying ? ' hide' : ''} ${!isLoading ? ' show' : ''}`} onClick={() => this.play()}>va≈æiuojam!</div>\n        {videoBlob && (\n          <div className={`video-wrap${!isLoading ? ' show' : ''} ${isPauseDisabled ? ' disable-pause' : ''} ${isPlaying ? ' playing' : ''}`}>\n            <Player playsInline={true} ref=\"player\" poster={false}>\n              <source src={videoBlob} />\n            </Player>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}